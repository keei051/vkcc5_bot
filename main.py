import os
import asyncio
import datetime
import logging
import re
from urllib.parse import urlparse, quote
import aiohttp
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bs4 import BeautifulSoup
import sqlite3
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger.add("bot.log", rotation="10 MB", retention="1 month")
logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")

# –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = "7348002301:AAH2AY0N6oFUWjK5OBn7epUWeD-63ZlSb-k"
VK_API_TOKEN = "c26551e5c26551e5c26551e564c1513cc2cc265c26551e5aa37c66a6a6d8f7092ca2102"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN or not VK_API_TOKEN:
    raise ValueError("BOT_TOKEN and VK_API_TOKEN must be set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
router = Router()
dp.include_router(router)
stats_cache = {}

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    def __init__(self, db_name='links.db'):
        self.db_name = db_name
        self.conn = sqlite3.connect(db_name)
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        c = self.conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS links (
            id INTEGER PRIMARY KEY,
            user_id TEXT,
            title TEXT,
            short TEXT,
            original TEXT,
            group_id INTEGER,
            created TEXT
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS groups (
            id INTEGER PRIMARY KEY,
            user_id TEXT,
            name TEXT
        )''')
        self.conn.commit()

    def execute(self, query, params=()):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        try:
            c = self.conn.cursor()
            c.execute(query, params)
            self.conn.commit()
            return c.fetchall() if query.upper().startswith('SELECT') else c.rowcount
        except sqlite3.Error as e:
            logger.error(f"DB execute failed: {e}")
            raise

    def __del__(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞."""
        self.conn.close()

db = Database()

class LinkForm(StatesGroup):
    waiting_for_link = State()
    waiting_for_title = State()
    bulk_links = State()
    bulk_titles = State()
    creating_group = State()
    rename_link = State()
    choosing_group = State()
    bulk_to_group = State()
    confirm_delete_link = State()
    waiting_for_stats_date = State()
    waiting_for_stats_date_one = State()
    waiting_for_stats_date_group = State()

def handle_error(handler):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö."""
    async def wrapper(*args, **kwargs):
        try:
            return await handler(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {handler.__name__} for user {args[0].from_user.id}: {e}")
            reply = get_main_menu()
            text = f'‚ùå –û—à–∏–±–∫–∞ ({datetime.datetime.now().strftime("%H:%M:%S")}): {str(e)[:50]}'
            if isinstance(args[0], types.CallbackQuery):
                try:
                    await args[0].message.edit_text(text, parse_mode="HTML", reply_markup=reply)
                except:
                    await args[0].message.answer(text, parse_mode="HTML", reply_markup=reply)
                await args[0].answer()
            elif isinstance(args[0], types.Message):
                await args[0].answer(text, parse_mode="HTML", reply_markup=reply)
    return wrapper

def sanitize_input(text):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return re.sub(r'[^\w\s-]', '', text.strip())[:100]

async def shorten_link_vk(url):
    """–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ URL —á–µ—Ä–µ–∑ VK API."""
    if not is_valid_url(url):
        return None, "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL."
    encoded_url = quote(url, safe='')
    for attempt in range(3):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://api.vk.com/method/utils.getShortLink?url={encoded_url}&v=5.199&access_token={VK_API_TOKEN}",
                    timeout=30
                ) as resp:
                    data = await resp.json()
                    if 'response' in data and 'short_url' in data['response']:
                        return data['response']['short_url'], ""
                    if 'error' in data:
                        error_code = data['error'].get('error_code', 'Unknown')
                        error_msg = data['error'].get('error_msg', 'Unknown')
                        return None, f"–û—à–∏–±–∫–∞ VK API: {error_msg} (–∫–æ–¥ {error_code})"
        except (aiohttp.ClientError, aiohttp.ClientTimeout) as e:
            if attempt == 2:
                return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å: {str(e)[:50]}"
            await asyncio.sleep(2 ** attempt)
    return None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫."

async def get_link_stats(key, date_from=None, date_to=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ."""
    cache_key = f"{key}:{date_from}:{date_to}"
    if cache_key in stats_cache and (datetime.datetime.now() - stats_cache.get(f"{cache_key}:time", 0)).seconds < 3600:
        return stats_cache[cache_key]
    params = {"access_token": VK_API_TOKEN, "key": key, "v": "5.199", "extended": 1, "interval": "day"}
    if date_from and date_to:
        params.update({"date_from": date_from, "date_to": date_to})
    result = {"views": 0, "cities": {}}
    for attempt in range(3):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get("https://api.vk.com/method/utils.getLinkStats", params=params, timeout=30) as resp:
                    data = await resp.json()
                    if "response" not in data:
                        logger.error(f"Invalid response from VK API: {data}")
                        return result
                    if "stats" in data["response"]:
                        for period in data["response"]["stats"]:
                            result["views"] += period.get("views", 0)
                            for city in period.get("cities", []):
                                result["cities"][str(city.get("city_id"))] = result["cities"].get(str(city.get("city_id")), 0) + city.get("views", 0)
                        stats_cache[cache_key] = result
                        stats_cache[f"{cache_key}:time"] = datetime.datetime.now()
                        return result
        except (aiohttp.ClientError, aiohttp.ClientTimeout) as e:
            if attempt == 2:
                return result
            await asyncio.sleep(2 ** attempt)
    return result

async def get_city_names(city_ids):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∏—Ö ID."""
    if not city_ids:
        return {}
    cache_key = f"cities:{','.join(map(str, city_ids))}"
    if cache_key in stats_cache:
        return stats_cache[cache_key]
    params = {"access_token": VK_API_TOKEN, "city_ids": ",".join(map(str, city_ids)), "v": "5.199"}
    result = {}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://api.vk.com/method/database.getCitiesById", params=params, timeout=30) as resp:
                data = await resp.json()
                if "response" in data:
                    result.update({str(city["id"]): city.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥") for city in data["response"]})
                stats_cache[cache_key] = result
                return result
    except (aiohttp.ClientError, aiohttp.ClientTimeout) as e:
        logger.error(f"Failed to fetch city names: {e}")
        return result

async def fetch_page_title(url):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ URL."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status != 200:
                    return None
                soup = BeautifulSoup(await resp.text(), 'html.parser')
                return soup.title.string.strip() if soup.title else None
    except Exception as e:
        logger.error(f"Failed to fetch page title for {url}: {e}")
        return None

def is_valid_url(url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL."""
    parsed = urlparse(url)
    return (parsed.scheme in ['http', 'https'] and parsed.netloc and
            not re.search(r'\b(javascript|vbscript|eval|onerror|onload|onclick)\b', url.lower(), re.IGNORECASE))

async def cleanup_chat(message, count=5):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""
    for i in range(count):
        try:
            msg = await bot.get_message(message.chat.id, message.message_id - i)
            if msg.from_user.id == bot.id:
                await bot.delete_message(message.chat.id, message.message_id - i)
        except:
            continue

def make_kb(buttons, row_width=2, extra_buttons=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    keyboard = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
    if extra_buttons:
        keyboard.append(extra_buttons[:row_width])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return make_kb([
        InlineKeyboardButton('üîó –°—Å—ã–ª–∫–∏', callback_data='menu_links'),
        InlineKeyboardButton('üìÅ –ü–∞–ø–∫–∏', callback_data='menu_groups'),
        InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='menu_stats'),
        InlineKeyboardButton('üóë –û—á–∏—Å—Ç–∏—Ç—å', callback_data='clear_all')
    ])

def get_links_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å—Å—ã–ª–æ–∫."""
    return make_kb([
        InlineKeyboardButton('‚ûï –û–¥–Ω–∞', callback_data='add_single'),
        InlineKeyboardButton('‚ûï –ù–µ—Å–∫–æ–ª—å–∫–æ', callback_data='add_bulk'),
        InlineKeyboardButton('üìã –ú–æ–∏', callback_data='my_links'),
        InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
    ], row_width=1)

def get_groups_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–∞–ø–æ–∫."""
    return make_kb([
        InlineKeyboardButton('‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data='create_group'),
        InlineKeyboardButton('üìÅ –ü–æ–∫–∞–∑–∞—Ç—å', callback_data='show_groups'),
        InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å', callback_data='del_group'),
        InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
    ], row_width=1)

def get_stats_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    return make_kb([
        InlineKeyboardButton('üîó –í—Å–µ', callback_data='show_stats:root'),
        InlineKeyboardButton('üìÖ –ü–µ—Ä–∏–æ–¥', callback_data='stats_by_date'),
        InlineKeyboardButton('üîó –û–¥–Ω–∞', callback_data='select_link_stats'),
        InlineKeyboardButton('üìÅ –ü–æ –ø–∞–ø–∫–∞–º', callback_data='group_stats_select'),
        InlineKeyboardButton('üóì 7 –¥–Ω–µ–π', callback_data='quick_stats_7d'),
        InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
    ], row_width=1)

cancel_kb = make_kb([InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel')], row_width=1)

def get_post_add_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."""
    return make_kb([
        InlineKeyboardButton('‚ûï –ï—â—ë', callback_data='add_single'),
        InlineKeyboardButton('üìã –ú–æ–∏', callback_data='my_links'),
        InlineKeyboardButton('üìÅ –ü–∞–ø–∫–∞', callback_data='ask_to_group'),
        InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
    ])

# Handlers
@router.message(Command("start"))
@handle_error
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.info(f"Received /start from user {message.from_user.id}")
    await state.clear()
    await message.answer("‚ú® @KaraLinka! ‚ú®\nüîó –°—Å—ã–ª–∫–∏\nüìÅ –ü–∞–ø–∫–∏\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=get_main_menu())

@router.message(Command("cancel"))
@handle_error
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
    logger.info(f"Received /cancel from user {message.from_user.id}")
    await state.clear()
    await message.answer('‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=get_main_menu())

@router.callback_query(F.data == "menu")
@handle_error
async def main_menu_handler(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    logger.info(f"Handling menu for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("üè† –ú–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=get_main_menu())
    await cb.answer()

@router.callback_query(F.data == "cancel")
@handle_error
async def cancel_action(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è."""
    logger.info(f"Handling cancel for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=get_main_menu())
    await cb.answer()

@router.callback_query(F.data == "menu_links")
@handle_error
async def menu_links(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å—Å—ã–ª–æ–∫."""
    logger.info(f"Handling menu_links for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("üîó –°—Å—ã–ª–∫–∏\n‚ûï –î–æ–±–∞–≤–∏—Ç—å\n‚ûï –ù–µ—Å–∫–æ–ª—å–∫–æ\nüìã –ú–æ–∏\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=get_links_menu())
    await cb.answer()

@router.callback_query(F.data == "menu_groups")
@handle_error
async def menu_groups(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–∞–ø–æ–∫."""
    logger.info(f"Handling menu_groups for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("üìÅ –ü–∞–ø–∫–∏\n‚ûï –°–æ–∑–¥–∞—Ç—å\nüìÅ –ü–æ–∫–∞–∑–∞—Ç—å\nüóë –£–¥–∞–ª–∏—Ç—å\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=get_groups_menu())
    await cb.answer()

@router.callback_query(F.data == "menu_stats")
@handle_error
async def menu_stats(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    logger.info(f"Handling menu_stats for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\nüîó –í—Å–µ\nüìÖ –ü–µ—Ä–∏–æ–¥\nüîó –û–¥–Ω–∞\nüìÅ –ü–æ –ø–∞–ø–∫–∞–º\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=get_stats_menu())
    await cb.answer()

@router.callback_query(F.data == "clear_all")
@handle_error
async def confirm_clear(cb: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"Handling clear_all for user {cb.from_user.id}")
    await state.clear()
    kb = make_kb([InlineKeyboardButton('‚úÖ –î–∞', callback_data='confirm_delete_all'), InlineKeyboardButton('üö´ –ù–µ—Ç', callback_data='menu')])
    await cb.message.edit_text("‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë? –ù–µ–æ–±—Ä–∞—Ç–∏–º–æ.", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "confirm_delete_all")
@handle_error
async def do_clear(cb: types.CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"Handling confirm_delete_all for user {cb.from_user.id}")
    uid = str(cb.from_user.id)
    db.execute('DELETE FROM links WHERE user_id = ?', (uid,))
    db.execute('DELETE FROM groups WHERE user_id = ?', (uid,))
    stats_cache.clear()
    await cb.message.edit_text("‚úÖ –í—Å—ë —É–¥–∞–ª–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=get_main_menu())
    await cb.answer()

@router.callback_query(F.data.startswith("show_stats:"))
@handle_error
async def show_stats(cb: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º."""
    logger.info(f"Handling show_stats for user {cb.from_user.id}, data={cb.data}")
    await state.clear()
    loading_msg = await bot.send_message(cb.message.chat.id, '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º...')
    uid = str(cb.from_user.id)
    scope = cb.data.split(':')[1]
    links = db.execute('SELECT id, title, short, original FROM links WHERE user_id = ? AND group_id IS NULL', (uid,)) if scope == 'root' else db.execute('SELECT id, title, short, original FROM links WHERE user_id = ? AND group_id = ?', (uid, int(scope)))
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {'–≤—Å–µ—Ö' if scope == 'root' else f'–ø–∞–ø–∫–∏ {scope}'}\n"
    if not links:
        text += "üëÅ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        link_list = [{'id': r[0], 'title': r[1], 'short': r[2], 'original': r[3]} for r in links]
        stats = await asyncio.gather(*(get_link_stats(l['short'].split('/')[-1]) for l in link_list))
        all_cities = {cid: sum(s['cities'].get(cid, 0) for s in stats) for cid in {c for s in stats for c in s['cities']}}
        city_names = await get_city_names(list(all_cities))
        text += "\n".join(f"üîó {l['title']} ({l['short']}): {stats[i]['views']}" for i, l in enumerate(link_list))
        text += f"\nüëÅ –í—Å–µ–≥–æ: {sum(s['views'] for s in stats)}"
        if all_cities:
            city_lines = [f'- {city_names.get(cid, "–ù–µ–∏–∑–≤.")}: {views}' for cid, views in all_cities.items()]
            text += "\nüèô –ì–æ—Ä–æ–¥–∞:\n" + "\n".join(city_lines)
        else:
            text += "\nüèô –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    kb = make_kb([InlineKeyboardButton('üîó –û–¥–Ω–∞', callback_data='select_link_stats'), InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await loading_msg.delete()
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "stats_by_date")
@handle_error
async def stats_by_date(cb: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    logger.info(f"Handling stats_by_date for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã: –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î (–ø—Ä–∏–º. 2025-06-01 2025-06-24)", parse_mode="HTML", reply_markup=cancel_kb)
    await state.set_state(LinkForm.waiting_for_stats_date)
    await cb.answer()

@router.message(StateFilter(LinkForm.waiting_for_stats_date))
@handle_error
async def process_stats_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    logger.info(f"Processing stats date from user {message.from_user.id}")
    dates = message.text.strip().split()
    if len(dates) != 2 or not all(re.match(r"\d{4}-\d{2}-\d{2}", d) for d in dates):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã.", reply_markup=cancel_kb)
        return
    date_from, date_to = dates
    uid = str(message.from_user.id)
    links = db.execute('SELECT id, title, short FROM links WHERE user_id = ?', (uid,))
    if not links:
        await message.answer("üìã –ù–µ—Ç —Å—Å—ã–ª–æ–∫.", reply_markup=get_stats_menu())
        await state.clear()
        return
    loading_msg = await message.answer('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º...')
    stats = await asyncio.gather(*(get_link_stats(l[2].split('/')[-1], date_from, date_to) for l in links))
    all_cities = {cid: sum(s['cities'].get(cid, 0) for s in stats) for cid in {c for s in stats for c in s['cities']}}
    city_names = await get_city_names(list(all_cities))
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date_from}‚Äî{date_to}\n"
    text += "\n".join(f"üîó {l[1]}: {stats[i]['views']}" for i, l in enumerate(links))
    text += f"\nüëÅ –í—Å–µ–≥–æ: {sum(s['views'] for s in stats)}"
    if all_cities:
        city_lines = [f"- {city_names.get(cid, '–ù–µ–∏–∑–≤.')}: {views}" for cid, views in all_cities.items()]
        text += "\nüèô –ì–æ—Ä–æ–¥–∞:\n" + "\n".join(city_lines)
    else:
        text += "\nüèô –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    await loading_msg.delete()
    await message.answer(text, parse_mode="HTML", reply_markup=get_stats_menu())
    await cleanup_chat(message)
    await state.clear()

@router.callback_query(F.data == "select_link_stats")
@handle_error
async def select_link_stats(cb: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    logger.info(f"Handling select_link_stats for user {cb.from_user.id}")
    await state.clear()
    uid = str(cb.from_user.id)
    links = db.execute('SELECT id, title, short FROM links WHERE user_id = ?', (uid,))
    if not links:
        await cb.message.edit_text("üìã –ù–µ—Ç —Å—Å—ã–ª–æ–∫.\n–î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ '–°—Å—ã–ª–∫–∏'.", parse_mode="HTML", reply_markup=get_stats_menu())
        await cb.answer()
        return
    buttons = [InlineKeyboardButton(f"üîó {l[1]}", callback_data=f'single_link_stats:root:{l[0]}') for l in links]
    kb = make_kb(buttons, row_width=1, extra_buttons=[InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text("üîó –í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É:", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("single_link_stats:"))
@handle_error
async def single_link_stats(cb: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Handling single_link_stats for user {cb.from_user.id}, data={cb.data}")
    await state.clear()
    loading_msg = await bot.send_message(cb.message.chat.id, '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º...')
    _, scope, link_id = cb.data.split(':')
    link_id = int(link_id)
    uid = str(cb.from_user.id)
    links = db.execute('SELECT id, title, short, original FROM links WHERE user_id = ? AND group_id IS NULL', (uid,)) if scope == 'root' else db.execute('SELECT id, title, short, original FROM links WHERE user_id = ? AND group_id = ?', (uid, int(scope)))
    link = next((l for l in links if l[0] == link_id), None)
    if not link:
        await loading_msg.delete()
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_stats_menu())
        await cb.answer()
        return
    link = {'id': link[0], 'title': link[1], 'short': link[2], 'original': link[3]}
    stats = await get_link_stats(link['short'].split('/')[-1])
    city_names = await get_city_names(list(stats['cities'].keys()))
    text = f"üìä {link['title']}\n{link['short']}\n{link['original']}\nüëÅ {stats['views']}"
    if stats['cities']:
        city_lines = [f"- {city_names.get(cid, '–ù–µ–∏–∑–≤.')}: {views}" for cid, views in stats['cities'].items()]
        text += "\nüèô " + "\n".join(city_lines)
    else:
        text += "\nüèô –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    kb = make_kb([
        InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'single_link_stats:{scope}:{link_id}'),
        InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='select_link_stats'),
        InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
    ])
    await loading_msg.delete()
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "group_stats_select")
@handle_error
async def group_stats_select(cb: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    logger.info(f"Handling group_stats_select for user {cb.from_user.id}")
    await state.clear()
    uid = str(cb.from_user.id)
    groups = db.execute('SELECT id, name FROM groups WHERE user_id = ?', (uid,))
    if not groups:
        await cb.message.edit_text("üìÅ –ù–µ—Ç –ø–∞–ø–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ '–ü–∞–ø–∫–∏'.", parse_mode="HTML", reply_markup=get_stats_menu())
        await cb.answer()
        return
    kb = make_kb([InlineKeyboardButton(f"üìÅ {g[1]}", callback_data=f'show_stats:{g[0]}') for g in groups], row_width=1, extra_buttons=[InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "add_single")
@handle_error
async def add_single(cb: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Handling add_single for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (http://...)\n–Ø —Å–æ–∫—Ä–∞—â—É.\n–û—Ç–º–µ–Ω–∞: üö´", parse_mode="HTML", reply_markup=cancel_kb)
    await state.set_state(LinkForm.waiting_for_link)
    await cb.answer()

@router.message(StateFilter(LinkForm.waiting_for_link))
@handle_error
async def process_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Processing link from user {message.from_user.id}")
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_kb)
        return
    loading_msg = await message.answer('‚è≥ –°–æ–∫—Ä–∞—â–∞—é...')
    short_url, error_msg = await shorten_link_vk(url)
    title = await fetch_page_title(url)
    await loading_msg.delete()
    if not short_url:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", reply_markup=cancel_kb)
        return
    await state.update_data(original=url, short=short_url, suggested_title=title)
    buttons = [InlineKeyboardButton('‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data='enter_title'), InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel')]
    if title:
        buttons.insert(0, InlineKeyboardButton('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', callback_data='use_suggested_title'))
    await message.answer(f"üîó {short_url}\n–ù–∞–∑–≤–∞–Ω–∏–µ: \"{title or '–ù–µ—Ç'}\"", parse_mode="HTML", reply_markup=make_kb(buttons))
    await cleanup_chat(message, 2)

@router.callback_query(F.data == "use_suggested_title")
@handle_error
async def use_suggested_title(cb: types.CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Handling use_suggested_title for user {cb.from_user.id}")
    data = await state.get_data()
    title = sanitize_input(data.get('suggested_title') or data['original'][:50])
    uid = str(cb.from_user.id)
    db.execute('INSERT INTO links (user_id, title, short, original, created) VALUES (?, ?, ?, ?, ?)', 
               (uid, title, data['short'], data['original'], datetime.datetime.now().isoformat()))
    stats_cache.pop(data['short'].split('/')[-1], None)
    await cb.message.edit_text(f"‚úÖ {title}\n{data['short']}\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", parse_mode="HTML", reply_markup=get_post_add_menu())
    await state.update_data(last_added_entry={'title': title, 'short': data['short'], 'original': data['original']})
    await state.set_state(LinkForm.choosing_group)
    await cb.answer()

@router.callback_query(F.data == "enter_title")
@handle_error
async def enter_title(cb: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Handling enter_title for user {cb.from_user.id}")
    await cb.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100):", parse_mode="HTML", reply_markup=cancel_kb)
    await state.set_state(LinkForm.waiting_for_title)
    await cb.answer()

@router.message(StateFilter(LinkForm.waiting_for_title))
@handle_error
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    logger.info(f"Processing title from user {message.from_user.id}")
    title = sanitize_input(message.text)
    if not title:
        await message.answer("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_kb)
        return
    data = await state.get_data()
    uid = str(message.from_user.id)
    db.execute('INSERT INTO links (user_id, title, short, original, created) VALUES (?, ?, ?, ?, ?)', 
               (uid, title, data['short'], data['original'], datetime.datetime.now().isoformat()))
    stats_cache.pop(data['short'].split('/')[-1], None)
    await message.answer(f"‚úÖ {title}\n{data['short']}\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", parse_mode="HTML", reply_markup=get_post_add_menu())
    await state.update_data(last_added_entry={'title': title, 'short': data['short'], 'original': data['original']})
    await cleanup_chat(message, 2)
    await state.set_state(LinkForm.choosing_group)

@router.callback_query(F.data == "add_bulk")
@handle_error
async def add_bulk(cb: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫."""
    logger.info(f"Handling add_bulk for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º:\nhttp://...\n–û—Ç–º–µ–Ω–∞: üö´", parse_mode="HTML", reply_markup=cancel_kb)
    await state.set_state(LinkForm.bulk_links)
    await cb.answer()

@router.message(StateFilter(LinkForm.bulk_links))
@handle_error
async def process_bulk_links(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."""
    logger.info(f"Processing bulk links from user {message.from_user.id}")
    valid = [l.strip() for l in message.text.splitlines() if l.strip() and is_valid_url(l)]
    if not valid:
        await message.answer("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.", reply_markup=cancel_kb)
        return
    await state.update_data(bulk_links=valid, success=[], failed=[])
    kb = make_kb([
        InlineKeyboardButton('üìù –í—Ä—É—á–Ω—É—é', callback_data='bulk_enter_titles'),
        InlineKeyboardButton('üîó URL', callback_data='bulk_use_url'),
        InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    ])
    await message.answer(f"‚úÖ {len(valid)} —Å—Å—ã–ª–æ–∫.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", parse_mode="HTML", reply_markup=kb)
    await cleanup_chat(message)

@router.callback_query(F.data == "bulk_use_url")
@handle_error
async def bulk_use_url(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º URL –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    logger.info(f"Handling bulk_use_url for user {cb.from_user.id}")
    data = await state.get_data()
    uid = str(cb.from_user.id)
    loading_msg = await bot.send_message(cb.message.chat.id, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...')
    for url in data['bulk_links']:
        short, error_msg = await shorten_link_vk(url)
        if short:
            db.execute('INSERT INTO links (user_id, title, short, original, created) VALUES (?, ?, ?, ?, ?)', 
                       (uid, url[:50], short, url, datetime.datetime.now().isoformat()))
            data['success'].append({'url': url, 'short': short})
        else:
            data['failed'].append({'url': url, 'error': error_msg})
    await loading_msg.delete()
    report = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(data['success'])}"
    if data['failed']:
        report += f"\n‚ùå –û—à–∏–±–∫–∏: {len(data['failed'])}\n" + "\n".join(f'üîó {f["url"]}: {f["error"]}' for f in data['failed'])
    kb = make_kb([
        InlineKeyboardButton('üìÅ –ü–∞–ø–∫–∞', callback_data='bulk_to_group'),
        InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
    ])
    await cb.message.edit_text(report + "\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", parse_mode="HTML", reply_markup=kb)
    await state.update_data(success=data['success'], failed=data['failed'])
    await state.set_state(LinkForm.bulk_to_group)
    await cb.answer()

@router.callback_query(F.data == "bulk_enter_titles")
@handle_error
async def bulk_enter_titles(cb: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫."""
    logger.info(f"Handling bulk_enter_titles for user {cb.from_user.id}")
    data = await state.get_data()
    await state.update_data(bulk_index=0)
    await cb.message.edit_text(f"‚úèÔ∏è 1/{len(data['bulk_links'])}\n{data['bulk_links'][0]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", parse_mode="HTML", reply_markup=cancel_kb)
    await state.set_state(LinkForm.bulk_titles)
    await cb.answer()

@router.message(StateFilter(LinkForm.bulk_titles))
@handle_error
async def process_bulk_titles(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫."""
    logger.info(f"Processing bulk titles from user {message.from_user.id}")
    data = await state.get_data()
    idx = data['bulk_index']
    url = data['bulk_links'][idx]
    title = sanitize_input(message.text)
    if not title:
        await message.answer(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ.\n{url}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:", reply_markup=cancel_kb)
        return
    loading_msg = await message.answer('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...')
    uid = str(message.from_user.id)
    short, error_msg = await shorten_link_vk(url)
    if short:
        db.execute('INSERT INTO links (user_id, title, short, original, created) VALUES (?, ?, ?, ?, ?)', 
                   (uid, title, short, url, datetime.datetime.now().isoformat()))
        data['success'].append({'title': title, 'short': short, 'original': url})
    else:
        data['failed'].append({'url': url, 'error': error_msg})
    await loading_msg.delete()
    idx += 1
    if idx < len(data['bulk_links']):
        await state.update_data(bulk_index=idx)
        await message.answer(f"‚úèÔ∏è {idx+1}/{len(data['bulk_links'])}\n{data['bulk_links'][idx]}\n–í–≤–µ–¥–∏—Ç–µ:", parse_mode="HTML", reply_markup=cancel_kb)
    else:
        report = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(data['success'])}\n" + "\n".join(f'üîó {s["title"]} ‚Üí {s["short"]}' for s in data['success'])
        if data['failed']:
            report += f"\n‚ùå –û—à–∏–±–∫–∏: {len(data['failed'])}\n" + "\n".join(f'üîó {f["url"]}: {f["error"]}' for f in data['failed'])
        kb = make_kb([
            InlineKeyboardButton('üìÅ –ü–∞–ø–∫–∞', callback_data='bulk_to_group'),
            InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
        ])
        await message.answer(report + "\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", parse_mode="HTML", reply_markup=kb)
        await cleanup_chat(message, 2)
        await state.set_state(LinkForm.bulk_to_group)
    await state.update_data(success=data['success'], failed=data['failed'])

@router.callback_query(F.data == "bulk_to_group")
@handle_error
async def bulk_to_group(cb: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫."""
    logger.info(f"Handling bulk_to_group for user {cb.from_user.id}")
    uid = str(cb.from_user.id)
    groups = db.execute('SELECT id, name FROM groups WHERE user_id = ?', (uid,))
    if not groups:
        await cb.message.edit_text("‚ùå –ù–µ—Ç –ø–∞–ø–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ.", parse_mode="HTML", reply_markup=get_groups_menu())
        await state.clear()
        return
    kb = make_kb([InlineKeyboardButton(f"üìÅ {g[1]}", callback_data=f'bulk_assign:{g[0]}') for g in groups], 
                 row_width=1, extra_buttons=[InlineKeyboardButton('‚ûï –ù–æ–≤–∞—è', callback_data='create_group_in_flow'), 
                                            InlineKeyboardButton('üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='bulk_skip_group'), 
                                            InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:", parse_mode="HTML", reply_markup=kb)
    await state.set_state(LinkForm.bulk_to_group)
    await cb.answer()

@router.callback_query(F.data == "bulk_skip_group")
@handle_error
async def bulk_skip_group(cb: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ –ø–∞–ø–∫—É."""
    logger.info(f"Handling bulk_skip_group for user {cb.from_user.id}")
    await cb.message.edit_text("‚úÖ –ë–µ–∑ –ø–∞–ø–∫–∏.\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", parse_mode="HTML", reply_markup=get_links_menu())
    await state.clear()
    await cb.answer()

@router.callback_query(F.data.startswith("bulk_assign:"))
@handle_error
async def bulk_assign_to_group(cb: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ –ø–∞–ø–∫—É."""
    logger.info(f"Handling bulk_assign for user {cb.from_user.id}, data={cb.data}")
    group_id = int(cb.data.split(':')[1])
    data = await state.get_data()
    uid = str(cb.from_user.id)
    success = data.get('success', [])
    if not success:
        await cb.message.edit_text("‚ùå –ù–µ—Ç —Å—Å—ã–ª–æ–∫.", parse_mode="HTML", reply_markup=get_links_menu())
        await state.clear()
        return
    updated = sum(db.execute('UPDATE links SET group_id = ? WHERE user_id = ? AND short = ?', 
                             (group_id, uid, entry['short'])) for entry in success)
    group = db.execute('SELECT name FROM groups WHERE id = ?', (group_id,))[0][0]
    links = db.execute('SELECT title, short FROM links WHERE user_id = ? AND group_id = ?', (uid, group_id))
    text = f"‚úÖ {updated} –≤ \"{group}\"\n"
    text += "\n".join(f"üîó {l[0]} ‚Üí {l[1]}" for l in links) if links else "üìö –ü—É—Å—Ç–æ."
    kb = make_kb([InlineKeyboardButton('üìÅ –ü–∞–ø–∫–∏', callback_data='menu_groups'), InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await state.clear()
    await cb.answer()

@router.callback_query(F.data == "my_links")
@handle_error
async def my_links(cb: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"Handling my_links for user {cb.from_user.id}")
    await state.clear()
    uid = str(cb.from_user.id)
    links = db.execute('SELECT id, title, short, original FROM links WHERE user_id = ? AND group_id IS NULL', (uid,))
    if not links:
        await cb.message.edit_text("üìã –ù–µ—Ç —Å—Å—ã–ª–æ–∫.\n–î–æ–±–∞–≤—å—Ç–µ.", parse_mode="HTML", reply_markup=get_links_menu())
        await cb.answer()
        return
    link_list = [{'id': r[0], 'title': r[1], 'short': r[2], 'original': r[3]} for r in links]
    stats = await asyncio.gather(*(get_link_stats(l['short'].split('/')[-1]) for l in link_list))
    buttons = [InlineKeyboardButton(f"üîó {l['title']} ({stats[i].get('views', 0)})", callback_data=f"link_action:root:{l['id']}") for i, l in enumerate(link_list)]
    kb = make_kb(buttons, row_width=1, extra_buttons=[InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text("üîó –°—Å—ã–ª–∫–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("link_action:"))
@handle_error
async def link_action(cb: types.CallbackQuery, state: FSMContext):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π."""
    logger.info(f"Handling link_action for user {cb.from_user.id}, data={cb.data}")
    await state.clear()
    _, scope, link_id = cb.data.split(':')
    link_id = int(link_id)
    uid = str(cb.from_user.id)
    links = db.execute('SELECT id, title, short, original, group_id FROM links WHERE user_id = ? AND group_id IS NULL', (uid,)) if scope == 'root' else db.execute('SELECT id, title, short, original, group_id FROM links WHERE user_id = ? AND group_id = ?', (uid, int(scope)))
    link = next((l for l in links if l[0] == link_id), None)
    if not link:
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_links_menu())
        await cb.answer()
        return
    link = {'id': link[0], 'title': link[1], 'short': link[2], 'original': link[3], 'group_id': link[4]}
    back_data = 'my_links' if scope == 'root' else f'view_group:{scope}'
    path = 'üîó –°—Å—ã–ª–∫–∏' if scope == 'root' else f'üìÅ {scope}'
    kb = make_kb([
        InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=f'single_link_stats:{scope}:{link_id}'),
        InlineKeyboardButton('‚úç –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', callback_data=f'rename:{scope}:{link_id}'),
        InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'confirm_delete:{scope}:{link_id}'),
        InlineKeyboardButton('üìÅ –ü–∞–ø–∫–∞', callback_data=f'togroup:{scope}:{link_id}'),
        InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu'),
        InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data=back_data)
    ])
    await cb.message.edit_text(f"{path}\nüîó {link['title']}\n{link['short']}\n{link['original']}\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("togroup:"))
@handle_error
async def togroup(cb: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–∞–ø–∫—É."""
    logger.info(f"Handling togroup for user {cb.from_user.id}, data={cb.data}")
    await state.clear()
    _, scope, link_id = cb.data.split(':')
    link_id = int(link_id)
    uid = str(cb.from_user.id)
    links = db.execute('SELECT id, title, short, original FROM links WHERE user_id = ? AND group_id IS NULL', (uid,)) if scope == 'root' else db.execute('SELECT id, title, short, original FROM links WHERE user_id = ? AND group_id = ?', (uid, int(scope)))
    link = next((l for l in links if l[0] == link_id), None)
    if not link:
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_links_menu())
        await cb.answer()
        return
    link = {'id': link[0], 'title': link[1], 'short': link[2], 'original': link[3]}
    groups = db.execute('SELECT id, name FROM groups WHERE user_id = ?', (uid,))
    if not groups:
        await cb.message.edit_text("‚ùå –ù–µ—Ç –ø–∞–ø–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ.", parse_mode="HTML", reply_markup=get_groups_menu())
        await state.clear()
        return
    await state.update_data(togroup_link=link)
    kb = make_kb([InlineKeyboardButton(f"üìÅ {g[1]}", callback_data=f'assign:{g[0]}') for g in groups], 
                 row_width=1, extra_buttons=[InlineKeyboardButton('‚ûï –ù–æ–≤–∞—è', callback_data='create_group_in_flow'), 
                                            InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel')])
    await cb.message.edit_text(f"üìÅ –ö—É–¥–∞ \"{link['title']}\"?", parse_mode="HTML", reply_markup=kb)
    await state.set_state(LinkForm.choosing_group)
    await cb.answer()

@router.callback_query(F.data.startswith("assign:"))
@handle_error
async def assign_to_group_single(cb: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –ø–∞–ø–∫—É."""
    logger.info(f"Handling assign for user {cb.from_user.id}, data={cb.data}")
    group_id = int(cb.data.split(':')[1])
    data = await state.get_data()
    link = data.get('togroup_link')
    if not link:
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_links_menu())
        await state.clear()
        return
    uid = str(cb.from_user.id)
    group = db.execute('SELECT id FROM groups WHERE id = ? AND user_id = ?', (group_id, uid))
    if not group:
        await cb.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_groups_menu())
        await state.clear()
        return
    db.execute('UPDATE links SET group_id = ? WHERE user_id = ? AND short = ?', (group_id, uid, link['short']))
    group_name = db.execute('SELECT name FROM groups WHERE id = ?', (group_id,))[0][0]
    links = db.execute('SELECT title, short FROM links WHERE user_id = ? AND group_id = ?', (uid, group_id))
    text = f"‚úÖ –í \"{group_name}\"\n"
    text += "\n".join(f"üîó {l[0]} ‚Üí {l[1]}" for l in links) if links else "üìö –ü—É—Å—Ç–æ."
    kb = make_kb([InlineKeyboardButton('üìÅ –ü–∞–ø–∫–∏', callback_data='menu_groups'), InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await state.clear()
    await cb.answer()

@router.callback_query(F.data == "ask_to_group")
@handle_error
async def ask_to_group(cb: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –ø–∞–ø–∫—É."""
    logger.info(f"Handling ask_to_group for user {cb.from_user.id}")
    uid = str(cb.from_user.id)
    data = await state.get_data()
    if not data.get('last_added_entry'):
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_links_menu())
        await state.clear()
        return
    groups = db.execute('SELECT id, name FROM groups WHERE user_id = ?', (uid,))
    if not groups:
        await cb.message.edit_text("‚ùå –ù–µ—Ç –ø–∞–ø–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ.", parse_mode="HTML", reply_markup=get_groups_menu())
        await state.clear()
        return
    kb = make_kb([InlineKeyboardButton(f"üìÅ {g[1]}", callback_data=f'single_assign:{g[0]}') for g in groups], 
                 row_width=1, extra_buttons=[InlineKeyboardButton('‚ûï –ù–æ–≤–∞—è', callback_data='create_group_in_flow'), 
                                            InlineKeyboardButton('üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_group'), 
                                            InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text("üìÅ –í –ø–∞–ø–∫—É?\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "skip_group")
@handle_error
async def skip_group(cb: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –ø–∞–ø–∫—É."""
    logger.info(f"Handling skip_group for user {cb.from_user.id}")
    await cb.message.edit_text("‚úÖ –ë–µ–∑ –ø–∞–ø–∫–∏.\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", parse_mode="HTML", reply_markup=get_links_menu())
    await state.clear()
    await cb.answer()

@router.callback_query(F.data.startswith("single_assign:"))
@handle_error
async def single_assign_to_group(cb: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –ø–∞–ø–∫—É."""
    logger.info(f"Handling single_assign for user {cb.from_user.id}, data={cb.data}")
    group_id = int(cb.data.split(':')[1])
    data = await state.get_data()
    entry = data.get('last_added_entry')
    if not entry:
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_links_menu())
        await state.clear()
        return
    uid = str(cb.from_user.id)
    group = db.execute('SELECT id FROM groups WHERE id = ? AND user_id = ?', (group_id, uid))
    if not group:
        await cb.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_groups_menu())
        await state.clear()
        return
    db.execute('UPDATE links SET group_id = ? WHERE user_id = ? AND short = ?', (group_id, uid, entry['short']))
    group_name = db.execute('SELECT name FROM groups WHERE id = ?', (group_id,))[0][0]
    links = db.execute('SELECT title, short FROM links WHERE user_id = ? AND group_id = ?', (uid, group_id))
    text = f"‚úÖ –í \"{group_name}\"\n"
    text += "\n".join(f"üîó {l[0]} ‚Üí {l[1]}" for l in links) if links else "üìö –ü—É—Å—Ç–æ."
    kb = make_kb([InlineKeyboardButton('üìÅ –ü–∞–ø–∫–∏', callback_data='menu_groups'), InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await state.clear()
    await cb.answer()

@router.callback_query(F.data == "create_group_in_flow")
@handle_error
async def create_group_in_flow(cb: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Handling create_group_in_flow for user {cb.from_user.id}")
    await cb.message.edit_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100):", parse_mode="HTML", reply_markup=cancel_kb)
    await state.set_state(LinkForm.creating_group)
    await cb.answer()

@router.message(StateFilter(LinkForm.creating_group))
@handle_error
async def process_create_group(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏."""
    logger.info(f"Processing create group from user {message.from_user.id}")
    name = sanitize_input(message.text)
    if not name:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:", reply_markup=cancel_kb)
        return
    uid = str(message.from_user.id)
    if db.execute('SELECT 1 FROM groups WHERE user_id = ? AND name = ?', (uid, name)):
        await message.answer("‚ùå –£–∂–µ –µ—Å—Ç—å.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ:", reply_markup=cancel_kb)
        return
    db.execute('INSERT INTO groups (user_id, name) VALUES (?, ?)', (uid, name))
    group_id = db.execute('SELECT id FROM groups WHERE user_id = ? AND name = ?', (uid, name))[0][0]
    data = await state.get_data()
    entry = data.get('last_added_entry') or data.get('togroup_link')
    text = f"‚úÖ –ü–∞–ø–∫–∞ \"{name}\" —Å–æ–∑–¥–∞–Ω–∞."
    if entry:
        db.execute('UPDATE links SET group_id = ? WHERE user_id = ? AND short = ?', (group_id, uid, entry['short']))
        stats = await get_link_stats(entry['short'].split('/')[-1])
        text += f"\nüîó {entry['title']}: {stats['views']}"
    await message.answer(text, parse_mode="HTML", reply_markup=get_groups_menu())
    await cleanup_chat(message)
    await state.clear()

@router.callback_query(F.data.startswith("confirm_delete:"))
@handle_error
async def confirm_delete_link(cb: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Handling confirm_delete for user {cb.from_user.id}, data={cb.data}")
    await state.clear()
    _, scope, link_id = cb.data.split(':')
    link_id = int(link_id)
    uid = str(cb.from_user.id)
    links = db.execute('SELECT id, title, short FROM links WHERE user_id = ? AND group_id IS NULL', (uid,)) if scope == 'root' else db.execute('SELECT id, title, short FROM links WHERE user_id = ? AND group_id = ?', (uid, int(scope)))
    link = next((l for l in links if l[0] == link_id), None)
    if not link:
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_links_menu())
        await cb.answer()
        return
    link = {'id': link[0], 'title': link[1], 'short': link[2]}
    back_data = 'my_links' if scope == 'root' else f'view_group:{scope}'
    await state.update_data(delete_scope=scope, delete_id=link_id, delete_short=link['short'])
    kb = make_kb([
        InlineKeyboardButton('‚úÖ –£–¥–∞–ª–∏—Ç—å', callback_data=f'do_delete:{scope}:{link_id}'),
        InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data=back_data)
    ])
    await cb.message.edit_text(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å?\n{link['title']}\n{link['short']}", parse_mode="HTML", reply_markup=kb)
    await state.set_state(LinkForm.confirm_delete_link)
    await cb.answer()

@router.callback_query(F.data.startswith("do_delete:"))
@handle_error
async def do_delete(cb: types.CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Handling do_delete for user {cb.from_user.id}, data={cb.data}")
    _, scope, link_id = cb.data.split(':')
    link_id = int(link_id)
    uid = str(cb.from_user.id)
    data = await state.get_data()
    db.execute('DELETE FROM links WHERE user_id = ? AND id = ?', (uid, link_id))
    stats_cache.pop(data['delete_short'].split('/')[-1], None)
    back_data = 'my_links' if scope == 'root' else f'view_group:{scope}'
    kb = make_kb([InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data=back_data)])
    await cb.message.edit_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", parse_mode="HTML", reply_markup=kb)
    await state.clear()
    await cb.answer()

@router.callback_query(F.data.startswith("rename:"))
@handle_error
async def rename_link(cb: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Handling rename for user {cb.from_user.id}, data={cb.data}")
    await state.clear()
    _, scope, link_id = cb.data.split(':')
    link_id = int(link_id)
    uid = str(cb.from_user.id)
    links = db.execute('SELECT id, title, short FROM links WHERE user_id = ? AND group_id IS NULL', (uid,)) if scope == 'root' else db.execute('SELECT id, title, short FROM links WHERE user_id = ? AND group_id = ?', (uid, int(scope)))
    link = next((l for l in links if l[0] == link_id), None)
    if not link:
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_links_menu())
        await cb.answer()
        return
    link = {'id': link[0], 'title': link[1], 'short': link[2]}
    await state.update_data(rename_link_id=link['id'], rename_scope=scope)
    await cb.message.edit_text(f"‚úç {link['title']}\n{link['short']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:", parse_mode="HTML", reply_markup=cancel_kb)
    await state.set_state(LinkForm.rename_link)
    await cb.answer()

@router.message(StateFilter(LinkForm.rename_link))
@handle_error
async def process_rename_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏."""
    logger.info(f"Processing rename link from user {message.from_user.id}")
    title = sanitize_input(message.text)
    if not title:
        await message.answer("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:", reply_markup=cancel_kb)
        return
    data = await state.get_data()
    link_id, scope = data['rename_link_id'], data['rename_scope']
    uid = str(message.from_user.id)
    db.execute('UPDATE links SET title = ? WHERE user_id = ? AND id = ?', (title, uid, link_id))
    back_data = 'my_links' if scope == 'root' else f'view_group:{scope}'
    kb = make_kb([InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data=back_data)])
    await message.answer(f"‚úÖ \"{title}\". –ß—Ç–æ –¥–∞–ª—å—à–µ?", parse_mode="HTML", reply_markup=kb)
    await cleanup_chat(message)
    await state.clear()

@router.callback_query(F.data == "create_group")
@handle_error
async def create_group(cb: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏."""
    logger.info(f"Handling create_group for user {cb.from_user.id}")
    await state.clear()
    await cb.message.edit_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100):", parse_mode="HTML", reply_markup=cancel_kb)
    await state.set_state(LinkForm.creating_group)
    await cb.answer()

@router.callback_query(F.data == "show_groups")
@handle_error
async def show_groups(cb: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫."""
    logger.info(f"Handling show_groups for user {cb.from_user.id}")
    await state.clear()
    uid = str(cb.from_user.id)
    groups = db.execute('SELECT id, name FROM groups WHERE user_id = ?', (uid,))
    if not groups:
        await cb.message.edit_text("üìÅ –ù–µ—Ç –ø–∞–ø–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ.", parse_mode="HTML", reply_markup=get_groups_menu())
        await cb.answer()
        return
    buttons = [InlineKeyboardButton(f"üìÅ {g[1]}", callback_data=f'view_group:{g[0]}') for g in groups]
    kb = make_kb(buttons, row_width=1, extra_buttons=[InlineKeyboardButton('üîó –°—Å—ã–ª–∫–∏', callback_data='my_links'), InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text("üìÅ –ü–∞–ø–∫–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("view_group:"))
@handle_error
async def view_group(cb: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏."""
    logger.info(f"Handling view_group for user {cb.from_user.id}, data={cb.data}")
    await state.clear()
    group_id = int(cb.data.split(':')[1])
    uid = str(cb.from_user.id)
    group = db.execute('SELECT name FROM groups WHERE user_id = ? AND id = ?', (uid, group_id))
    if not group:
        await cb.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_groups_menu())
        await cb.answer()
        return
    group_name = group[0][0]
    text = f"üìÅ {group_name}\n"
    links = db.execute('SELECT id, title, short FROM links WHERE user_id = ? AND group_id = ?', (uid, group_id))
    items = [{'id': l[0], 'title': l[1], 'short': l[2]} for l in links]
    buttons = []
    if not items:
        text += 'üìö –ü—É—Å—Ç–æ.'
    else:
        stats = await asyncio.gather(*(get_link_stats(l['short'].split('/')[-1]) for l in items))
        buttons.extend(InlineKeyboardButton(f"üîó {l['title']} ({stats[i].get('views', 0)})", callback_data=f'link_action:{group_id}:{l['id']}') for i, l in enumerate(items))
    kb = make_kb(buttons, row_width=1, extra_buttons=[
        InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=f'show_stats:{group_id}'),
        InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu'),
        InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='show_groups')
    ])
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "del_group")
@handle_error
async def del_group(cb: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    logger.info(f"Handling del_group for user {cb.from_user.id}")
    await state.clear()
    uid = str(cb.from_user.id)
    groups = db.execute('SELECT id, name FROM groups WHERE user_id = ?', (uid,))
    if not groups:
        await cb.message.edit_text("üìÅ –ù–µ—Ç –ø–∞–ø–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ.", parse_mode="HTML", reply_markup=get_groups_menu())
        await cb.answer()
        return
    kb = make_kb([InlineKeyboardButton(f"üóë {g[1]}", callback_data=f"confirm_delete_group:{g[0]}") for g in groups], 
                 row_width=1, extra_buttons=[InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')])
    await cb.message.edit_text("üìÅ –£–¥–∞–ª–∏—Ç—å:\n–í—ã–±–µ—Ä–∏—Ç–µ:", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("confirm_delete_group:"))
@handle_error
async def confirm_delete_group(cb: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏."""
    logger.info(f"Handling confirm_delete_group for user {cb.from_user.id}, data={cb.data}")
    await state.clear()
    group_id = int(cb.data.split(':')[1])
    uid = str(cb.from_user.id)
    group = db.execute('SELECT name FROM groups WHERE user_id = ? AND id = ?', (uid, group_id))
    if not group:
        await cb.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_groups_menu())
        await cb.answer()
        return
    group_name = group[0][0]
    await state.update_data(group_to_delete=group_id)
    kb = make_kb([
        InlineKeyboardButton('‚úÖ –£–¥–∞–ª–∏—Ç—å', callback_data=f'do_delete_group:{group_id}'),
        InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='show_groups')
    ])
    await cb.message.edit_text(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å \"{group_name}\"? –°—Å—ã–ª–∫–∏ –≤ –∫–æ—Ä–µ–Ω—å.", parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("do_delete_group:"))
@handle_error
async def do_delete_group(cb: types.CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏."""
    logger.info(f"Handling do_delete_group for user {cb.from_user.id}, data={cb.data}")
    group_id = int(cb.data.split(':')[1])
    uid = str(cb.from_user.id)
    group = db.execute('SELECT name FROM groups WHERE user_id = ? AND id = ?', (uid, group_id))
    if not group:
        await cb.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_groups_menu())
        await state.clear()
        return
    group_name = group[0][0]
    db.execute('UPDATE links SET group_id = NULL WHERE user_id = ? AND group_id = ?', (uid, group_id))
    db.execute('DELETE FROM groups WHERE user_id = ? AND id = ?', (uid, group_id))
    await cb.message.edit_text(f"‚úÖ \"{group_name}\" —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_groups_menu())
    await state.clear()
    await cb.answer()

@router.callback_query(F.data == "quick_stats_7d")
@handle_error
async def quick_stats(cb: types.CallbackQuery, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π."""
    logger.info(f"Handling quick_stats_7d for user {cb.from_user.id}")
    await state.clear()
    uid = str(cb.from_user.id)
    links = db.execute('SELECT id, title, short FROM links WHERE user_id = ?', (uid,))
    if not links:
        await cb.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.", parse_mode="HTML", reply_markup=get_stats_menu())
        await cb.answer()
        return
    date_to = datetime.datetime.utcnow().date()
    date_from = date_to - datetime.timedelta(days=7)
    loading_msg = await cb.message.answer("‚è≥ –°—á–∏—Ç–∞–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...")
    stats = await asyncio.gather(*(get_link_stats(l[2].split('/')[-1], str(date_from), str(date_to)) for l in links))
    all_cities = {cid: sum(s['cities'].get(cid, 0) for s in stats) for cid in {c for s in stats for c in s['cities']}}
    city_names = await get_city_names(list(all_cities))
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date_from}‚Äî{date_to}\n"
    text += "\n".join(f"üîó {l[1]} ‚Äî {stats[i].get('views', 0)} –∫–ª–∏–∫–æ–≤" for i, l in enumerate(links))
    text += f"\nüëÅ –í—Å–µ–≥–æ: {sum(s.get('views', 0) for s in stats)}"
    if all_cities:
        city_lines = [f"- {city_names.get(cid, '–ù–µ–∏–∑–≤.')}: {views}" for cid, views in all_cities.items()]
        text += "\nüèô –ì–æ—Ä–æ–¥–∞:\n" + "\n".join(city_lines)
    else:
        text += "\nüèô –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥–∞–º."
    await loading_msg.delete()
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=get_stats_menu())
    await cb.answer()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("Starting bot...")
    try:
        await dp.start_polling()
    except Exception as e:
        logger.error(f"Bot failed: {e}")
    finally:
        await dp.storage.close()
        await dp.storage.wait_closed()

if __name__ == "__main__":
    asyncio.run(main())
