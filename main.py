import os
import asyncio
import sqlite3
import re
from datetime import datetime
from urllib.parse import quote
from loguru import logger
import aiohttp
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger.add("bot.log", rotation="1 MB")
logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
BOT_TOKEN = os.getenv("BOT_TOKEN") or "8177494043:AAG0CE7HrXB17uIiqRewNvJemmITi3ShLUc"
VK_TOKEN = os.getenv("VK_API_TOKEN") or "b4a1b020b4a1b020b4a1b020b5b794c059bb4a1b4a1b020dcc370dd89310543ea6e73ed"

if not BOT_TOKEN or not VK_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    raise ValueError("BOT_TOKEN –∏ VK_TOKEN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class LinkForm(StatesGroup):
    waiting_for_link = State()
    waiting_for_title = State()
    waiting_for_stats_date = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_name='links.db'):
        self.db_name = db_name
        self._init_db()

    def _init_db(self):
        with sqlite3.connect(self.db_name) as conn:
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS links (
                user_id TEXT, title TEXT, short TEXT, original TEXT, created TEXT
            )''')
            conn.commit()

    def execute(self, query, params=()):
        try:
            with sqlite3.connect(self.db_name) as conn:
                c = conn.cursor()
                c.execute(query, params)
                conn.commit()
                return c.fetchall() if query.upper().startswith('SELECT') else c.rowcount
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

db = Database()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
def is_valid_url(url):
    return bool(re.match(r'^https?://[^\s/$.?#].[^\s]*$', url, re.IGNORECASE))

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ VK API
async def shorten_link_vk(url):
    if not is_valid_url(url):
        return None, "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL"
    encoded_url = quote(url, safe='')
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://api.vk.com/method/utils.getShortLink?url={encoded_url}&v=5.199&access_token={VK_TOKEN}",
                timeout=10
            ) as resp:
                data = await resp.json()
                if 'response' in data and 'short_url' in data['response']:
                    return data['response']['short_url'], ""
                error_msg = data.get('error', {}).get('error_msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"–û—à–∏–±–∫–∞ VK API: {error_msg}")
                return None, f"–û—à–∏–±–∫–∞: {error_msg}"
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å: {str(e)[:50]}"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ
async def get_link_stats(key, date_from=None, date_to=None):
    params = {"access_token": VK_TOKEN, "key": key, "v": "5.199", "extended": 1, "interval": "day"}
    if date_from and date_to:
        params.update({"date_from": date_from, "date_to": date_to})
    result = {"clicks": 0}  # –ù–∞–∑—ã–≤–∞–µ–º "clicks" –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, —Ö–æ—Ç—è —ç—Ç–æ views
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                "https://api.vk.com/method/utils.getLinkStats",
                params=params,
                timeout=10
            ) as resp:
                data = await resp.json()
                if "response" in data and "stats" in data["response"]:
                    for period in data["response"]["stats"]:
                        result["clicks"] += period.get("views", 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º views –∫–∞–∫ –∫–ª–∏–∫–∏
                    return result
                logger.error(f"–û—à–∏–±–∫–∞ VK API: {data.get('error', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                return result
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return result

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_kb(buttons, row_width=2):
    keyboard = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return make_kb([
        InlineKeyboardButton('üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data='add_link'),
        InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤', callback_data='stats'),
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
cancel_kb = make_kb([InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel')])

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_error(handler):
    async def wrapper(*args, **kwargs):
        try:
            return await handler(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ {handler.__name__}: {e}")
            text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}"
            reply = get_main_menu()
            if isinstance(args[0], types.CallbackQuery):
                await args[0].message.edit_text(text, reply_markup=reply)
                await args[0].answer()
            elif isinstance(args[0], types.Message):
                await args[0].answer(text, reply_markup=reply)
    return wrapper

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(Command("start"))
@handle_error
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú®\nüîó –°–æ–∫—Ä–∞—â–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏\nüìä –°–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n\n‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã, –Ω–æ VK API —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, —á—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∫–ª–∏–∫–∏.",
        reply_markup=get_main_menu()
    )

@router.callback_query(lambda c: c.data == "cancel")
@handle_error
async def cancel_action(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
    await cb.answer()

@router.callback_query(lambda c: c.data == "add_link")
@handle_error
async def add_link(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text(
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (http://... –∏–ª–∏ https://...):",
        reply_markup=cancel_kb
    )
    await state.set_state(LinkForm.waiting_for_link)
    await cb.answer()

@router.message(StateFilter(LinkForm.waiting_for_link))
@handle_error
async def process_link(message: types.Message, state: FSMContext):
    url = message.text.strip()
    if not is_valid_url(url):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ø—Ä–∏–º–µ—Ä: https://example.com):", reply_markup=cancel_kb)
        return
    loading_msg = await message.answer('‚è≥ –°–æ–∫—Ä–∞—â–∞—é...')
    short_url, error_msg = await shorten_link_vk(url)
    await loading_msg.delete()
    if not short_url:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", reply_markup=cancel_kb)
        return
    await state.update_data(original=url, short=short_url)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=cancel_kb)
    await state.set_state(LinkForm.waiting_for_title)

@router.message(StateFilter(LinkForm.waiting_for_title))
@handle_error
async def process_title(message: types.Message, state: FSMContext):
    title = message.text.strip()[:100]
    if not title:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:", reply_markup=cancel_kb)
        return
    data = await state.get_data()
    uid = str(message.from_user.id)
    db.execute(
        'INSERT INTO links (user_id, title, short, original, created) VALUES (?, ?, ?, ?, ?)',
        (uid, title, data['short'], data['original'], datetime.now().isoformat())
    )
    await message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n<b>{title}</b>\n{data['short']}",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    await state.clear()

@router.callback_query(lambda c: c.data == "stats")
@handle_error
async def stats_menu(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã (–ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-01 2025-06-30):",
        reply_markup=cancel_kb
    )
    await state.set_state(LinkForm.waiting_for_stats_date)
    await cb.answer()

@router.message(StateFilter(LinkForm.waiting_for_stats_date))
@handle_error
async def process_stats_date(message: types.Message, state: FSMContext):
    dates = message.text.strip().split()
    if len(dates) != 2 or not all(re.match(r"\d{4}-\d{2}-\d{2}", d) for d in dates):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-06-01 2025-06-30", reply_markup=cancel_kb)
        return
    date_from, date_to = dates
    try:
        datetime.strptime(date_from, "%Y-%m-%d")
        datetime.strptime(date_to, "%Y-%m-%d")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î", reply_markup=cancel_kb)
        return
    if datetime.strptime(date_to, "%Y-%m-%d") < datetime.strptime(date_from, "%Y-%m-%d"):
        await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π", reply_markup=cancel_kb)
        return
    uid = str(message.from_user.id)
    links = db.execute('SELECT title, short FROM links WHERE user_id = ?', (uid,))
    if not links:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–æ–∫", reply_markup=get_main_menu())
        await state.clear()
        return
    loading_msg = await message.answer('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º...')
    stats = await asyncio.gather(
        *(get_link_stats(l[1].split('/')[-1], date_from, date_to) for l in links)
    )
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ {date_from}‚Äî{date_to}\n\n"
    total_clicks = 0
    for i, link in enumerate(links):
        clicks = stats[i]['clicks']
        total_clicks += clicks
        text += f"üîó {link[0]}: {clicks} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n"
    text += f"\nüëÅ –í—Å–µ–≥–æ: {total_clicks} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"
    await loading_msg.delete()
    await message.answer(text, reply_markup=get_main_menu())
    await state.clear()

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await dp.storage.close()
        await dp.storage.wait_closed()

if __name__ == "__main__":
    asyncio.run(main())
