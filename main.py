import os
import asyncio
import json
import re
from datetime import datetime
from urllib.parse import quote
from loguru import logger
import aiohttp
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger.add("bot.log", rotation="1 MB")
logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
BOT_TOKEN = os.getenv("BOT_TOKEN") or "8177494043:AAG0CE7HrXB17uIiqRewNvJemmITi3ShLUc"
VK_TOKEN = os.getenv("VK_API_TOKEN") or "b4a1b020b4a1b020b4a1b020b5b794c059bb4a1b4a1b020dcc370dd89310543ea6e73ed"

if not BOT_TOKEN or not VK_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    raise ValueError("BOT_TOKEN –∏ VK_TOKEN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class LinkForm(StatesGroup):
    waiting_for_link = State()
    waiting_for_title = State()
    waiting_for_stats_date = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
class JsonStorage:
    def __init__(self, file_name='/data/links.json'):
        self.file_name = file_name
        self.data = self._load_data()

    def _load_data(self):
        try:
            with open(self.file_name, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.info("–§–∞–π–ª links.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π")
            return {}
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
            return {}

    def _save_data(self):
        try:
            with open(self.file_name, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON: {e}")
            raise

    def get_user_links(self, user_id):
        return self.data.get(str(user_id), [])

    def add_link(self, user_id, link_data):
        user_id = str(user_id)
        if user_id not in self.data:
            self.data[user_id] = []
        self.data[user_id].append(link_data)
        self._save_data()

storage = JsonStorage()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
def is_valid_url(url):
    return bool(re.match(r'^https?://[^\s/$.?#].[^\s]*$', url, re.IGNORECASE))

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ VK API
async def shorten_link_vk(url):
    if not is·Éõ·ÉùÔøΩ

System: –Ø –Ω–µ –º–æ–≥—É —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–¥, —Ç–∞–∫ –∫–∞–∫ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã —è –º–æ–≥ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. 

–ò–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —è—Å–Ω–æ, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–≤–æ–π–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–æ—É—Ç–µ—Ä–∞, –∏ —è —É–∂–µ –∏—Å–ø—Ä–∞–≤–∏–ª —ç—Ç–æ, —É–±—Ä–∞–≤ `dp.include_router(router)` –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏. –û–¥–Ω–∞–∫–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –æ—à–∏–±–æ–∫, –ø–æ–ª–Ω—ã–π –∫–æ–¥ –±—ã–ª –±—ã –ø–æ–ª–µ–∑–µ–Ω.

–¢–∞–∫–∂–µ –≤—ã —É–ø–æ–º—è–Ω—É–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –≤ `links.json` –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∞ –Ω–µ –±—ã–ª–∏ –∂—ë—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã. –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤—ã—à–µ, —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ: –æ–Ω —Å–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π `links.json` (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ —Å `user_id` —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ—Ç –ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º.

### **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**

1. **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞**:
   - –£–¥–∞–ª–µ–Ω–æ `dp.include_router(router)` –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.
   - –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ `main()`:
     ```python
     async def main():
         logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
         try:
             await bot.delete_webhook(drop_pending_updates=True)
             dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
             await dp.start_polling(bot)
         except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
         finally:
             await bot.session.close()
